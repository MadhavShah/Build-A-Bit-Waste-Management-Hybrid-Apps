type Comment
{
#   The id of the comment's parent event.
eventId: ID!
#   A unique identifier for the comment.
commentId: String!
#   The comment's content.
content: String!
#   The comment timestamp. This field is indexed to enable sorted pagination.
createdAt: String!
}

type CommentConnection
{
items: [Comment]
nextToken: String
}

type Event
{
id: ID!
name: String
where: String
when: String
description: String
#   Paginate through all comments belonging to an individual post.
comments(limit: Int,nextToken: String ): CommentConnection
}

type EventConnection
{
items: [Event]
nextToken: String
}

type Mutation
{
#   Create a single event.
createEvent(name: String!,when: String!,where: String!,description: String! ): Event
#   Delete a single event by id.
deleteEvent(id: ID! ): Event
#   Comment on an event.
commentOnEvent(eventId: ID!,content: String!,createdAt: String! ): Comment
}

type Query
{
#   Get a single event by id.
getEvent(id: ID! ): Event
#   Paginate through events.
listEvents(limit: Int,nextToken: String ): EventConnection
}

type Subscription
{
subscribeToEventComments(eventId: String! ): Comment
@aws_subscribe(mutations: ["commentOnEvent"])
}

schema 
{
query: Query
mutation: Mutation
subscription: Subscription
}
