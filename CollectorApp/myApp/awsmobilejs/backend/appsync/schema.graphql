type BinData
{
Bin_id: String!
Area_id: String!
Bin_full_percentage: Float!
Bin_status: String!
Lattitude: Float!
Longitude: Float!
Non_Renew_Bin_full_percentage: Float!
Ren_Bin_full_percentage: Float!
mail_sent: Boolean!
time_stamp: String!
Gas_Sensor: Int!
collection_status: String!
}

type BinDataConnection
{
items: [BinData]
nextToken: String
}

input CreateBinDataInput
{
Bin_id: String!
Area_id: String!
Bin_full_percentage: Float!
Bin_status: String!
Lattitude: Float!
Longitude: Float!
Non_Renew_Bin_full_percentage: Float!
Ren_Bin_full_percentage: Float!
mail_sent: Boolean!
time_stamp: String!
Gas_Sensor: Int!
collection_status: String!}

input DeleteBinDataInput
{
Bin_id: String!}

type Mutation
{
createBinData(input: CreateBinDataInput! ): BinData
updateBinData(input: UpdateBinDataInput! ): BinData
deleteBinData(input: DeleteBinDataInput! ): BinData
}

type Query
{
getBinData(Bin_id: String! ): BinData
listBinData(first: Int,after: String ): BinDataConnection
}

type Subscription
{
onCreateBinData(Bin_id: String,Area_id: String,Bin_full_percentage: Float,Bin_status: String,Lattitude: Float ): BinData
@aws_subscribe(mutations: ["createBinData"])
onUpdateBinData(Bin_id: String,Area_id: String,Bin_full_percentage: Float,Bin_status: String,Lattitude: Float ): BinData
@aws_subscribe(mutations: ["updateBinData"])
onDeleteBinData(Bin_id: String,Area_id: String,Bin_full_percentage: Float,Bin_status: String,Lattitude: Float ): BinData
}

input UpdateBinDataInput
{
Bin_id: String!
Area_id: String
Bin_full_percentage: Float
Bin_status: String
Lattitude: Float
Longitude: Float
Non_Renew_Bin_full_percentage: Float
Ren_Bin_full_percentage: Float
mail_sent: Boolean
time_stamp: String
Gas_Sensor: Int
collection_status: String}

schema 
{
query: Query
mutation: Mutation
subscription: Subscription
}
