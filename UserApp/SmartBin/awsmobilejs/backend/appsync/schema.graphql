type Comment
{
eventId: ID!
commentId: String!
content: String!
createdAt: String!
}

type CommentConnection
{
items: [Comment]
nextToken: String
}

input CreateGarbageDataInput
{
request_id: String!
AmountofWaste: Int!
Time: String!
Date: String!
Type: String!
Image: String!
Lat: Int!
Long: Int!}

input DeleteGarbageDataInput
{
request_id: String!}

type Event
{
id: ID!
name: String
where: String
when: String
description: String
comments(limit: Int,nextToken: String ): CommentConnection
}

type EventConnection
{
items: [Event]
nextToken: String
}

type GarbageData
{
request_id: String!
AmountofWaste: Int!
Time: String!
Date: String!
Type: String!
Image: String!
Lat: Int!
Long: Int!
}

type GarbageDataConnection
{
items: [GarbageData]
nextToken: String
}

type Mutation
{
createEvent(name: String!,when: String!,where: String!,description: String! ): Event
deleteEvent(id: ID! ): Event
commentOnEvent(eventId: ID!,content: String!,createdAt: String! ): Comment
createGarbageData(input: CreateGarbageDataInput! ): GarbageData
updateGarbageData(input: UpdateGarbageDataInput! ): GarbageData
deleteGarbageData(input: DeleteGarbageDataInput! ): GarbageData
}

type Query
{
getEvent(id: ID! ): Event
listEvents(limit: Int,nextToken: String ): EventConnection
getGarbageData(request_id: String! ): GarbageData
listGarbageData(filter: TableGarbageDataFilterInput,limit: Int,nextToken: String ): GarbageDataConnection
}

type Subscription
{
subscribeToEventComments(eventId: String! ): Comment
@aws_subscribe(mutations: ["commentOnEvent"])
onCreateGarbageData(request_id: String,AmountofWaste: Int,Time: String,Date: String,Type: String ): GarbageData
@aws_subscribe(mutations: ["createGarbageData"])
onUpdateGarbageData(request_id: String,AmountofWaste: Int,Time: String,Date: String,Type: String ): GarbageData
@aws_subscribe(mutations: ["updateGarbageData"])
onDeleteGarbageData(request_id: String,AmountofWaste: Int,Time: String,Date: String,Type: String ): GarbageData
@aws_subscribe(mutations: ["deleteGarbageData"])
}

input TableBooleanFilterInput
{
ne: Boolean
eq: Boolean}

input TableFloatFilterInput
{
ne: Float
eq: Float
le: Float
lt: Float
ge: Float
gt: Float
contains: Float
notContains: Float
between: [Float]}

input TableGarbageDataFilterInput
{
request_id: TableStringFilterInput
AmountofWaste: TableIntFilterInput
Time: TableStringFilterInput
Date: TableStringFilterInput
Type: TableStringFilterInput
Image: TableStringFilterInput
Lat: TableIntFilterInput
Long: TableIntFilterInput}

input TableIDFilterInput
{
ne: ID
eq: ID
le: ID
lt: ID
ge: ID
gt: ID
contains: ID
notContains: ID
between: [ID]
beginsWith: ID}

input TableIntFilterInput
{
ne: Int
eq: Int
le: Int
lt: Int
ge: Int
gt: Int
contains: Int
notContains: Int
between: [Int]}

input TableStringFilterInput
{
ne: String
eq: String
le: String
lt: String
ge: String
gt: String
contains: String
notContains: String
between: [String]
beginsWith: String}

input UpdateGarbageDataInput
{
request_id: String!
AmountofWaste: Int
Time: String
Date: String
Type: String
Image: String
Lat: Int
Long: Int}

schema 
{
query: Query
mutation: Mutation
subscription: Subscription
}
